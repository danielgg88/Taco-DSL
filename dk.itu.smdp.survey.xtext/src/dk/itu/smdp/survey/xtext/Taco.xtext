// automatically generated by Xtext
grammar dk.itu.smdp.survey.xtext.Taco with org.eclipse.xtext.common.Terminals

import "platform:/resource/dk.itu.smdp.survey/model/SurveyModel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Survey returns Survey:
		'title' ':' title=EString
		('date' ':' date=EString)?
		('description' ':' description=EString)?
		(person=Person)?
		categories+=Category (categories+=Category)*
	;

Question returns Question:
	MultipleChoice_Impl | Ranking | Rating | YesNo | OpenField | MutuallyExclusive_Impl;

Description returns Description:
	Text | Image;

Category returns Category:
	'category' '<'
		'title' ':' title=EString
		('description' ':' description=EString)?
		 steps+=Step (steps+=Step)*
	'>' 'category';

EString returns ecore::EString:
	STRING | ID;

Person returns Person:
	'person' '<'
		attribute+=PersonAttribute ( "," attribute+=PersonAttribute)*
	'>' 'person';

Step returns Step:
	'step' '<'
		questions+=Question (questions+=Question)* 
	'>' 'step';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Option returns Option:
	{Option}
	'option' '<'
		('isCheckedByDefault' ':' isCheckedByDefault=EBoolean)?		
		('isUserInputAllowed' ':' isUserInputAllowed=EBoolean)?
		(contains+=Description ( "," contains+=Description)*)?
	'>' 'option';

MultipleChoice_Impl returns MultipleChoice:
	'multipleChoice' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		'min' ':' min=EInt
		'max' ':' max=EInt
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'multipleChoice';

Ranking returns Ranking:
	'ranking' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'ranking';

Rating returns Rating:
	'rating' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		'start' ':' start=EFloat
		'end' ':' end=EFloat
		('interval' ':' interval=EFloat)?
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'rating';

YesNo returns YesNo:
	'yesNo' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'yesNo';

OpenField returns OpenField:
	'openField' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'openField';

MutuallyExclusive_Impl returns MutuallyExclusive:
	'mutuallyExclusive' '<'
		'questionText' ':' questionText=EString
		('isMandatory' ':' isMandatory=EBoolean)?
		(option+=Option ( option+=Option)* )?
		('subQuestions' '<' subquestion+=Question (subquestion+=Question)* '>' 'subQuestions')?
	'>' 'mutuallyExclusive';

Text returns Text:
	'text' ':' content=EString;

Image returns Image:
	'image' ':' content=EString;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

PersonAttribute returns PersonAttribute:
	key=EString;
