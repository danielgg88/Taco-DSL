/*
 * generated by Xtext
 */
package dk.itu.smdp.survey.xtext.validation

import SurveyModel.MultipleChoice
import SurveyModel.Ranking
import SurveyModel.Rating
import SurveyModel.SurveyModelPackage
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class TacoValidator extends AbstractTacoValidator {
	
	public static final String CHECK_MULTIPLE_CHOICE_MAX_MIN = "check_multiple_choice_max_min";
	public static final String CHECK_RATING_START_END = "check_rating_start_end";
	public static final String CHECK_RATING_INTERVAL_BOUNDARY = "check_rating_interval_boundary";
	public static final String CHECK_RATING_INTERVAL_VALUE = "check_rating_interval_value";
	public static final String CHECK_RANKING_NO_SUBQUESTION = "check_ranking_no_subquestion";
	
	@Check
	def checkMultipleChoiceMaxMin(MultipleChoice it)
	{
		if(max < min)
		{
			error("The max value must be higher than or equal to the min value : [min-max]",
				SurveyModelPackage.Literals.MULTIPLE_CHOICE__MAX,
				CHECK_MULTIPLE_CHOICE_MAX_MIN,
				Integer.toString(max)
			);
		}
	}
	
	@Check
	def checkRatingStartEnd(Rating it)
	{
		if(end <= start)
		{
			error("The end value must be higher than the start value : [start-end, interval]",
				SurveyModelPackage.Literals.RATING__END,
				CHECK_RATING_START_END,
				Integer.toString(end)
			);
		}
	}
	
	@Check
	def checkRatingIntervalBoundary(Rating it)
	{
		if((end - start) < interval)
		{
			error("The interval value must be smaller than the distance between start and end : [start-end, interval]",
				SurveyModelPackage.Literals.RATING__INTERVAL,
				CHECK_RATING_INTERVAL_BOUNDARY,
				Integer.toString(interval)
			);
		}
	}
	
	@Check
	def checkRatingIntervalValue(Rating it)
	{
		if(((end - start) % interval) != 0)
		{
			error("The interval value must be multiples of the distance between start and end : [start-end, interval]",
				SurveyModelPackage.Literals.RATING__INTERVAL,
				CHECK_RATING_INTERVAL_VALUE,
				Integer.toString(interval)
			);
		}
	}
	
	@Check
	def checkRankingNoSubquestion(Ranking it)
	{
		if(answers.filter[subquestion.length != 0].length != 0)
		{
			error("Ranking answers cannot contain subquestions",
				SurveyModelPackage.Literals.ANSWER__SUBQUESTION,
				CHECK_RANKING_NO_SUBQUESTION,
				answers.filter[subquestion.length != 0].head.description
			);
		}
	}
}
