/*
* generated by Xtext
*/
grammar InternalTaco;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.smdp.survey.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.smdp.survey.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.smdp.survey.xtext.services.TacoGrammarAccess;

}

@parser::members {

 	private TacoGrammarAccess grammarAccess;
 	
    public InternalTacoParser(TokenStream input, TacoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Survey";	
   	}
   	
   	@Override
   	protected TacoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='title' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSurveyAccess().getTitleKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSurveyAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getTitleEStringParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='date' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSurveyAccess().getDateKeyword_3_0());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSurveyAccess().getColonKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getDateEStringParserRuleCall_3_2_0()); 
	    }
		lv_date_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"date",
        		lv_date_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='description' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSurveyAccess().getDescriptionKeyword_4_0());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSurveyAccess().getColonKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getDescriptionEStringParserRuleCall_4_2_0()); 
	    }
		lv_description_8_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_8_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getPersonPersonParserRuleCall_5_0()); 
	    }
		lv_person_9_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"person",
        		lv_person_9_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getCategoriesCategoryParserRuleCall_6_0()); 
	    }
		lv_categories_10_0=ruleCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"categories",
        		lv_categories_10_0, 
        		"Category");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getCategoriesCategoryParserRuleCall_7_0()); 
	    }
		lv_categories_11_0=ruleCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"categories",
        		lv_categories_11_0, 
        		"Category");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoice_ImplParserRuleCall_0()); 
    }
    this_MultipleChoice_Impl_0=ruleMultipleChoice_Impl
    { 
        $current = $this_MultipleChoice_Impl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRankingParserRuleCall_1()); 
    }
    this_Ranking_1=ruleRanking
    { 
        $current = $this_Ranking_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRatingParserRuleCall_2()); 
    }
    this_Rating_2=ruleRating
    { 
        $current = $this_Rating_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getYesNoParserRuleCall_3()); 
    }
    this_YesNo_3=ruleYesNo
    { 
        $current = $this_YesNo_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenFieldParserRuleCall_4()); 
    }
    this_OpenField_4=ruleOpenField
    { 
        $current = $this_OpenField_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMutuallyExclusive_ImplParserRuleCall_5()); 
    }
    this_MutuallyExclusive_Impl_5=ruleMutuallyExclusive_Impl
    { 
        $current = $this_MutuallyExclusive_Impl_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	 iv_ruleDescription=ruleDescription 
	 { $current=$iv_ruleDescription.current; } 
	 EOF 
;

// Rule Description
ruleDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDescriptionAccess().getTextParserRuleCall_0()); 
    }
    this_Text_0=ruleText
    { 
        $current = $this_Text_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDescriptionAccess().getImageParserRuleCall_1()); 
    }
    this_Image_1=ruleImage
    { 
        $current = $this_Image_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCategoryRule()); }
	 iv_ruleCategory=ruleCategory 
	 { $current=$iv_ruleCategory.current; } 
	 EOF 
;

// Rule Category
ruleCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='category' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCategoryAccess().getCategoryKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCategoryAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='title' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCategoryAccess().getTitleKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCategoryAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getTitleEStringParserRuleCall_4_0()); 
	    }
		lv_title_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='description' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCategoryAccess().getDescriptionKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCategoryAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getDescriptionEStringParserRuleCall_5_2_0()); 
	    }
		lv_description_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getStepsStepParserRuleCall_6_0()); 
	    }
		lv_steps_8_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_8_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getStepsStepParserRuleCall_7_0()); 
	    }
		lv_steps_9_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_9_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCategoryAccess().getGreaterThanSignKeyword_8());
    }
	otherlv_11='category' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCategoryAccess().getCategoryKeyword_9());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='person' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPersonAccess().getPersonKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPersonAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getAttributePersonAttributeParserRuleCall_2_0()); 
	    }
		lv_attribute_2_0=rulePersonAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		add(
       			$current, 
       			"attribute",
        		lv_attribute_2_0, 
        		"PersonAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPersonAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getAttributePersonAttributeParserRuleCall_3_1_0()); 
	    }
		lv_attribute_4_0=rulePersonAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		add(
       			$current, 
       			"attribute",
        		lv_attribute_4_0, 
        		"PersonAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPersonAccess().getGreaterThanSignKeyword_4());
    }
	otherlv_6='person' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPersonAccess().getPersonKeyword_5());
    }
)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='step' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStepAccess().getStepKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStepAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getQuestionsQuestionParserRuleCall_2_0()); 
	    }
		lv_questions_2_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_2_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getQuestionsQuestionParserRuleCall_3_0()); 
	    }
		lv_questions_3_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_3_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStepAccess().getGreaterThanSignKeyword_4());
    }
	otherlv_5='step' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStepAccess().getStepKeyword_5());
    }
)
;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionAccess().getOptionAction_0(),
            $current);
    }
)	otherlv_1='option' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionAccess().getOptionKeyword_1());
    }
	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionAccess().getLessThanSignKeyword_2());
    }
(	otherlv_3='isCheckedByDefault' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionAccess().getIsCheckedByDefaultKeyword_3_0());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOptionAccess().getColonKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getIsCheckedByDefaultEBooleanParserRuleCall_3_2_0()); 
	    }
		lv_isCheckedByDefault_5_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		set(
       			$current, 
       			"isCheckedByDefault",
        		lv_isCheckedByDefault_5_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='isUserInputAllowed' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOptionAccess().getIsUserInputAllowedKeyword_4_0());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionAccess().getColonKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getIsUserInputAllowedEBooleanParserRuleCall_4_2_0()); 
	    }
		lv_isUserInputAllowed_8_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		set(
       			$current, 
       			"isUserInputAllowed",
        		lv_isUserInputAllowed_8_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getContainsDescriptionParserRuleCall_5_0_0()); 
	    }
		lv_contains_9_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_9_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOptionAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getContainsDescriptionParserRuleCall_5_1_1_0()); 
	    }
		lv_contains_11_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_11_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getOptionAccess().getGreaterThanSignKeyword_6());
    }
	otherlv_13='option' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getOptionAccess().getOptionKeyword_7());
    }
)
;





// Entry rule entryRuleMultipleChoice_Impl
entryRuleMultipleChoice_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoice_ImplRule()); }
	 iv_ruleMultipleChoice_Impl=ruleMultipleChoice_Impl 
	 { $current=$iv_ruleMultipleChoice_Impl.current; } 
	 EOF 
;

// Rule MultipleChoice_Impl
ruleMultipleChoice_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multipleChoice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultipleChoice_ImplAccess().getMultipleChoiceKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultipleChoice_ImplAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultipleChoice_ImplAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoice_ImplAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoice_ImplAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultipleChoice_ImplAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='min' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultipleChoice_ImplAccess().getMinKeyword_6());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultipleChoice_ImplAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getMinEIntParserRuleCall_8_0()); 
	    }
		lv_min_10_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_10_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='max' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMultipleChoice_ImplAccess().getMaxKeyword_9());
    }
	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultipleChoice_ImplAccess().getColonKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getMaxEIntParserRuleCall_11_0()); 
	    }
		lv_max_13_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_13_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getOptionOptionParserRuleCall_12_0_0()); 
	    }
		lv_option_14_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_14_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getOptionOptionParserRuleCall_12_1_0()); 
	    }
		lv_option_15_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_15_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_16='subQuestions' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMultipleChoice_ImplAccess().getSubQuestionsKeyword_13_0());
    }
	otherlv_17='<' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMultipleChoice_ImplAccess().getLessThanSignKeyword_13_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getSubquestionQuestionParserRuleCall_13_2_0()); 
	    }
		lv_subquestion_18_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_18_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoice_ImplAccess().getSubquestionQuestionParserRuleCall_13_3_0()); 
	    }
		lv_subquestion_19_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoice_ImplRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_19_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_20='>' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getMultipleChoice_ImplAccess().getGreaterThanSignKeyword_13_4());
    }
	otherlv_21='subQuestions' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getMultipleChoice_ImplAccess().getSubQuestionsKeyword_13_5());
    }
)?	otherlv_22='>' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getMultipleChoice_ImplAccess().getGreaterThanSignKeyword_14());
    }
	otherlv_23='multipleChoice' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getMultipleChoice_ImplAccess().getMultipleChoiceKeyword_15());
    }
)
;





// Entry rule entryRuleRanking
entryRuleRanking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRankingRule()); }
	 iv_ruleRanking=ruleRanking 
	 { $current=$iv_ruleRanking.current; } 
	 EOF 
;

// Rule Ranking
ruleRanking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ranking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRankingAccess().getRankingKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRankingAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRankingAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRankingAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRankingAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRankingAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getOptionOptionParserRuleCall_6_0_0()); 
	    }
		lv_option_8_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_8_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getOptionOptionParserRuleCall_6_1_0()); 
	    }
		lv_option_9_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_9_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='subQuestions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRankingAccess().getSubQuestionsKeyword_7_0());
    }
	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRankingAccess().getLessThanSignKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getSubquestionQuestionParserRuleCall_7_2_0()); 
	    }
		lv_subquestion_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRankingAccess().getSubquestionQuestionParserRuleCall_7_3_0()); 
	    }
		lv_subquestion_13_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRankingRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_13_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRankingAccess().getGreaterThanSignKeyword_7_4());
    }
	otherlv_15='subQuestions' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRankingAccess().getSubQuestionsKeyword_7_5());
    }
)?	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRankingAccess().getGreaterThanSignKeyword_8());
    }
	otherlv_17='ranking' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRankingAccess().getRankingKeyword_9());
    }
)
;





// Entry rule entryRuleRating
entryRuleRating returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatingRule()); }
	 iv_ruleRating=ruleRating 
	 { $current=$iv_ruleRating.current; } 
	 EOF 
;

// Rule Rating
ruleRating returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rating' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRatingAccess().getRatingKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRatingAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRatingAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRatingAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRatingAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRatingAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='start' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRatingAccess().getStartKeyword_6());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRatingAccess().getColonKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getStartEFloatParserRuleCall_8_0()); 
	    }
		lv_start_10_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_10_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRatingAccess().getEndKeyword_9());
    }
	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRatingAccess().getColonKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getEndEFloatParserRuleCall_11_0()); 
	    }
		lv_end_13_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_13_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14='interval' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRatingAccess().getIntervalKeyword_12_0());
    }
	otherlv_15=':' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRatingAccess().getColonKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getIntervalEFloatParserRuleCall_12_2_0()); 
	    }
		lv_interval_16_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		set(
       			$current, 
       			"interval",
        		lv_interval_16_0, 
        		"EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getOptionOptionParserRuleCall_13_0_0()); 
	    }
		lv_option_17_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_17_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getOptionOptionParserRuleCall_13_1_0()); 
	    }
		lv_option_18_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_18_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_19='subQuestions' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRatingAccess().getSubQuestionsKeyword_14_0());
    }
	otherlv_20='<' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRatingAccess().getLessThanSignKeyword_14_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getSubquestionQuestionParserRuleCall_14_2_0()); 
	    }
		lv_subquestion_21_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_21_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRatingAccess().getSubquestionQuestionParserRuleCall_14_3_0()); 
	    }
		lv_subquestion_22_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRatingRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_22_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_23='>' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRatingAccess().getGreaterThanSignKeyword_14_4());
    }
	otherlv_24='subQuestions' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getRatingAccess().getSubQuestionsKeyword_14_5());
    }
)?	otherlv_25='>' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getRatingAccess().getGreaterThanSignKeyword_15());
    }
	otherlv_26='rating' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getRatingAccess().getRatingKeyword_16());
    }
)
;





// Entry rule entryRuleYesNo
entryRuleYesNo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYesNoRule()); }
	 iv_ruleYesNo=ruleYesNo 
	 { $current=$iv_ruleYesNo.current; } 
	 EOF 
;

// Rule YesNo
ruleYesNo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='yesNo' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getYesNoAccess().getYesNoKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getYesNoAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getYesNoAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getYesNoAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getYesNoAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getYesNoAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getOptionOptionParserRuleCall_6_0_0()); 
	    }
		lv_option_8_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_8_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getOptionOptionParserRuleCall_6_1_0()); 
	    }
		lv_option_9_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_9_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='subQuestions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getYesNoAccess().getSubQuestionsKeyword_7_0());
    }
	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getYesNoAccess().getLessThanSignKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getSubquestionQuestionParserRuleCall_7_2_0()); 
	    }
		lv_subquestion_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getYesNoAccess().getSubquestionQuestionParserRuleCall_7_3_0()); 
	    }
		lv_subquestion_13_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYesNoRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_13_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getYesNoAccess().getGreaterThanSignKeyword_7_4());
    }
	otherlv_15='subQuestions' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getYesNoAccess().getSubQuestionsKeyword_7_5());
    }
)?	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getYesNoAccess().getGreaterThanSignKeyword_8());
    }
	otherlv_17='yesNo' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getYesNoAccess().getYesNoKeyword_9());
    }
)
;





// Entry rule entryRuleOpenField
entryRuleOpenField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenFieldRule()); }
	 iv_ruleOpenField=ruleOpenField 
	 { $current=$iv_ruleOpenField.current; } 
	 EOF 
;

// Rule OpenField
ruleOpenField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='openField' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenFieldAccess().getOpenFieldKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenFieldAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpenFieldAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenFieldAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenFieldAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpenFieldAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getOptionOptionParserRuleCall_6_0_0()); 
	    }
		lv_option_8_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_8_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getOptionOptionParserRuleCall_6_1_0()); 
	    }
		lv_option_9_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_9_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='subQuestions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOpenFieldAccess().getSubQuestionsKeyword_7_0());
    }
	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getOpenFieldAccess().getLessThanSignKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getSubquestionQuestionParserRuleCall_7_2_0()); 
	    }
		lv_subquestion_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenFieldAccess().getSubquestionQuestionParserRuleCall_7_3_0()); 
	    }
		lv_subquestion_13_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenFieldRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_13_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getOpenFieldAccess().getGreaterThanSignKeyword_7_4());
    }
	otherlv_15='subQuestions' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getOpenFieldAccess().getSubQuestionsKeyword_7_5());
    }
)?	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getOpenFieldAccess().getGreaterThanSignKeyword_8());
    }
	otherlv_17='openField' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getOpenFieldAccess().getOpenFieldKeyword_9());
    }
)
;





// Entry rule entryRuleMutuallyExclusive_Impl
entryRuleMutuallyExclusive_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutuallyExclusive_ImplRule()); }
	 iv_ruleMutuallyExclusive_Impl=ruleMutuallyExclusive_Impl 
	 { $current=$iv_ruleMutuallyExclusive_Impl.current; } 
	 EOF 
;

// Rule MutuallyExclusive_Impl
ruleMutuallyExclusive_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mutuallyExclusive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMutuallyExclusive_ImplAccess().getMutuallyExclusiveKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMutuallyExclusive_ImplAccess().getLessThanSignKeyword_1());
    }
	otherlv_2='questionText' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMutuallyExclusive_ImplAccess().getQuestionTextKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMutuallyExclusive_ImplAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getQuestionTextEStringParserRuleCall_4_0()); 
	    }
		lv_questionText_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		set(
       			$current, 
       			"questionText",
        		lv_questionText_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='isMandatory' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMutuallyExclusive_ImplAccess().getIsMandatoryKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMutuallyExclusive_ImplAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getIsMandatoryEBooleanParserRuleCall_5_2_0()); 
	    }
		lv_isMandatory_7_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		set(
       			$current, 
       			"isMandatory",
        		lv_isMandatory_7_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getOptionOptionParserRuleCall_6_0_0()); 
	    }
		lv_option_8_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_8_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getOptionOptionParserRuleCall_6_1_0()); 
	    }
		lv_option_9_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		add(
       			$current, 
       			"option",
        		lv_option_9_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='subQuestions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMutuallyExclusive_ImplAccess().getSubQuestionsKeyword_7_0());
    }
	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMutuallyExclusive_ImplAccess().getLessThanSignKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getSubquestionQuestionParserRuleCall_7_2_0()); 
	    }
		lv_subquestion_12_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_12_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMutuallyExclusive_ImplAccess().getSubquestionQuestionParserRuleCall_7_3_0()); 
	    }
		lv_subquestion_13_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutuallyExclusive_ImplRule());
	        }
       		add(
       			$current, 
       			"subquestion",
        		lv_subquestion_13_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMutuallyExclusive_ImplAccess().getGreaterThanSignKeyword_7_4());
    }
	otherlv_15='subQuestions' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMutuallyExclusive_ImplAccess().getSubQuestionsKeyword_7_5());
    }
)?	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMutuallyExclusive_ImplAccess().getGreaterThanSignKeyword_8());
    }
	otherlv_17='mutuallyExclusive' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMutuallyExclusive_ImplAccess().getMutuallyExclusiveKeyword_9());
    }
)
;





// Entry rule entryRuleText
entryRuleText returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	 iv_ruleText=ruleText 
	 { $current=$iv_ruleText.current; } 
	 EOF 
;

// Rule Text
ruleText returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='text' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextAccess().getTextKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTextAccess().getContentEStringParserRuleCall_2_0()); 
	    }
		lv_content_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImage
entryRuleImage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImageRule()); }
	 iv_ruleImage=ruleImage 
	 { $current=$iv_ruleImage.current; } 
	 EOF 
;

// Rule Image
ruleImage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImageAccess().getImageKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImageAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImageAccess().getContentEStringParserRuleCall_2_0()); 
	    }
		lv_content_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImageRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFloatRule()); } 
	 iv_ruleEFloat=ruleEFloat 
	 { $current=$iv_ruleEFloat.current.getText(); }  
	 EOF 
;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3()); 
    }
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2()); 
    }
)?)
    ;





// Entry rule entryRulePersonAttribute
entryRulePersonAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonAttributeRule()); }
	 iv_rulePersonAttribute=rulePersonAttribute 
	 { $current=$iv_rulePersonAttribute.current; } 
	 EOF 
;

// Rule PersonAttribute
rulePersonAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAttributeAccess().getKeyEStringParserRuleCall_0()); 
	    }
		lv_key_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonAttributeRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


