/*
* generated by Xtext
*/
package dk.itu.smdp.survey.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TacoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDateKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDateEStringParserRuleCall_2_1_0 = (RuleCall)cDateAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		private final Assignment cPersonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPersonPersonParserRuleCall_4_0 = (RuleCall)cPersonAssignment_4.eContents().get(0);
		private final Assignment cCategoriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCategoriesCategoryParserRuleCall_5_0 = (RuleCall)cCategoriesAssignment_5.eContents().get(0);
		private final Assignment cCategoriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCategoriesCategoryParserRuleCall_6_0 = (RuleCall)cCategoriesAssignment_6.eContents().get(0);
		
		//Survey:
		//	"survey" title=EString ("date" date=EString)? ("description" description=EString)? person=Person? categories+=Category
		//	categories+=Category*;
		public ParserRule getRule() { return rule; }

		//"survey" title=EString ("date" date=EString)? ("description" description=EString)? person=Person? categories+=Category
		//categories+=Category*
		public Group getGroup() { return cGroup; }

		//"survey"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//("date" date=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"date"
		public Keyword getDateKeyword_2_0() { return cDateKeyword_2_0; }

		//date=EString
		public Assignment getDateAssignment_2_1() { return cDateAssignment_2_1; }

		//EString
		public RuleCall getDateEStringParserRuleCall_2_1_0() { return cDateEStringParserRuleCall_2_1_0; }

		//("description" description=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"description"
		public Keyword getDescriptionKeyword_3_0() { return cDescriptionKeyword_3_0; }

		//description=EString
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_1_0() { return cDescriptionEStringParserRuleCall_3_1_0; }

		//person=Person?
		public Assignment getPersonAssignment_4() { return cPersonAssignment_4; }

		//Person
		public RuleCall getPersonPersonParserRuleCall_4_0() { return cPersonPersonParserRuleCall_4_0; }

		//categories+=Category
		public Assignment getCategoriesAssignment_5() { return cCategoriesAssignment_5; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_5_0() { return cCategoriesCategoryParserRuleCall_5_0; }

		//categories+=Category*
		public Assignment getCategoriesAssignment_6() { return cCategoriesAssignment_6; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_6_0() { return cCategoriesCategoryParserRuleCall_6_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultipleChoice_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRankingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRatingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYesNoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOpenFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMutuallyExclusive_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Question:
		//	MultipleChoice_Impl | Ranking | Rating | YesNo | OpenField | MutuallyExclusive_Impl;
		public ParserRule getRule() { return rule; }

		//MultipleChoice_Impl | Ranking | Rating | YesNo | OpenField | MutuallyExclusive_Impl
		public Alternatives getAlternatives() { return cAlternatives; }

		//MultipleChoice_Impl
		public RuleCall getMultipleChoice_ImplParserRuleCall_0() { return cMultipleChoice_ImplParserRuleCall_0; }

		//Ranking
		public RuleCall getRankingParserRuleCall_1() { return cRankingParserRuleCall_1; }

		//Rating
		public RuleCall getRatingParserRuleCall_2() { return cRatingParserRuleCall_2; }

		//YesNo
		public RuleCall getYesNoParserRuleCall_3() { return cYesNoParserRuleCall_3; }

		//OpenField
		public RuleCall getOpenFieldParserRuleCall_4() { return cOpenFieldParserRuleCall_4; }

		//MutuallyExclusive_Impl
		public RuleCall getMutuallyExclusive_ImplParserRuleCall_5() { return cMutuallyExclusive_ImplParserRuleCall_5; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Assignment cPagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPagesPageParserRuleCall_3_0 = (RuleCall)cPagesAssignment_3.eContents().get(0);
		private final Assignment cPagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPagesPageParserRuleCall_4_0 = (RuleCall)cPagesAssignment_4.eContents().get(0);
		
		//Category:
		//	"category" title=EString ("description" description=EString)? pages+=Page pages+=Page*;
		public ParserRule getRule() { return rule; }

		//"category" title=EString ("description" description=EString)? pages+=Page pages+=Page*
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//("description" description=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"description"
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }

		//description=EString
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_1_0() { return cDescriptionEStringParserRuleCall_2_1_0; }

		//pages+=Page
		public Assignment getPagesAssignment_3() { return cPagesAssignment_3; }

		//Page
		public RuleCall getPagesPageParserRuleCall_3_0() { return cPagesPageParserRuleCall_3_0; }

		//pages+=Page*
		public Assignment getPagesAssignment_4() { return cPagesAssignment_4; }

		//Page
		public RuleCall getPagesPageParserRuleCall_4_0() { return cPagesPageParserRuleCall_4_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributePersonAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributePersonAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		
		//Person:
		//	"person" attribute+=PersonAttribute ("," attribute+=PersonAttribute)*;
		public ParserRule getRule() { return rule; }

		//"person" attribute+=PersonAttribute ("," attribute+=PersonAttribute)*
		public Group getGroup() { return cGroup; }

		//"person"
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }

		//attribute+=PersonAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//PersonAttribute
		public RuleCall getAttributePersonAttributeParserRuleCall_1_0() { return cAttributePersonAttributeParserRuleCall_1_0; }

		//("," attribute+=PersonAttribute)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//attribute+=PersonAttribute
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }

		//PersonAttribute
		public RuleCall getAttributePersonAttributeParserRuleCall_2_1_0() { return cAttributePersonAttributeParserRuleCall_2_1_0; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_1_0 = (RuleCall)cQuestionsAssignment_1.eContents().get(0);
		private final Assignment cQuestionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_0 = (RuleCall)cQuestionsAssignment_2.eContents().get(0);
		
		//Page:
		//	"page" questions+=Question questions+=Question*;
		public ParserRule getRule() { return rule; }

		//"page" questions+=Question questions+=Question*
		public Group getGroup() { return cGroup; }

		//"page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_1() { return cQuestionsAssignment_1; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_1_0() { return cQuestionsQuestionParserRuleCall_1_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_2() { return cQuestionsAssignment_2; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_0() { return cQuestionsQuestionParserRuleCall_2_0; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIsUserInputAllowedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cIsUserInputAllowedLeftSquareBracketKeyword_3_0_0 = (Keyword)cIsUserInputAllowedAssignment_3_0.eContents().get(0);
		private final Keyword cInputKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubquestionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubquestionQuestionParserRuleCall_4_1_0 = (RuleCall)cSubquestionAssignment_4_1.eContents().get(0);
		private final Assignment cSubquestionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSubquestionQuestionParserRuleCall_4_2_0 = (RuleCall)cSubquestionAssignment_4_2.eContents().get(0);
		private final Keyword cEndKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Answer:
		//	{Answer} "A" description=EString (isUserInputAllowed?="[" "input" "]")? ("sub" subquestion+=Question
		//	subquestion+=Question* "end")?;
		public ParserRule getRule() { return rule; }

		//{Answer} "A" description=EString (isUserInputAllowed?="[" "input" "]")? ("sub" subquestion+=Question
		//subquestion+=Question* "end")?
		public Group getGroup() { return cGroup; }

		//{Answer}
		public Action getAnswerAction_0() { return cAnswerAction_0; }

		//"A"
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }

		//(isUserInputAllowed?="[" "input" "]")?
		public Group getGroup_3() { return cGroup_3; }

		//isUserInputAllowed?="["
		public Assignment getIsUserInputAllowedAssignment_3_0() { return cIsUserInputAllowedAssignment_3_0; }

		//"["
		public Keyword getIsUserInputAllowedLeftSquareBracketKeyword_3_0_0() { return cIsUserInputAllowedLeftSquareBracketKeyword_3_0_0; }

		//"input"
		public Keyword getInputKeyword_3_1() { return cInputKeyword_3_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//("sub" subquestion+=Question subquestion+=Question* "end")?
		public Group getGroup_4() { return cGroup_4; }

		//"sub"
		public Keyword getSubKeyword_4_0() { return cSubKeyword_4_0; }

		//subquestion+=Question
		public Assignment getSubquestionAssignment_4_1() { return cSubquestionAssignment_4_1; }

		//Question
		public RuleCall getSubquestionQuestionParserRuleCall_4_1_0() { return cSubquestionQuestionParserRuleCall_4_1_0; }

		//subquestion+=Question*
		public Assignment getSubquestionAssignment_4_2() { return cSubquestionAssignment_4_2; }

		//Question
		public RuleCall getSubquestionQuestionParserRuleCall_4_2_0() { return cSubquestionQuestionParserRuleCall_4_2_0; }

		//"end"
		public Keyword getEndKeyword_4_3() { return cEndKeyword_4_3; }
	}

	public class MultipleChoice_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinEIntParserRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxEIntParserRuleCall_6_0 = (RuleCall)cMaxAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAnswersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnswersAnswerParserRuleCall_8_0 = (RuleCall)cAnswersAssignment_8.eContents().get(0);
		private final Assignment cAnswersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnswersAnswerParserRuleCall_9_0 = (RuleCall)cAnswersAssignment_9.eContents().get(0);
		
		//MultipleChoice_Impl returns MultipleChoice:
		//	"Q" isMandatory?="*"? questionText=EString "[" min=EInt "-" max=EInt "]" answers+=Answer answers+=Answer*;
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString "[" min=EInt "-" max=EInt "]" answers+=Answer answers+=Answer*
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//min=EInt
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_4_0() { return cMinEIntParserRuleCall_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }

		//max=EInt
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_0() { return cMaxEIntParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//answers+=Answer
		public Assignment getAnswersAssignment_8() { return cAnswersAssignment_8; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_8_0() { return cAnswersAnswerParserRuleCall_8_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_9() { return cAnswersAssignment_9; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_9_0() { return cAnswersAnswerParserRuleCall_9_0; }
	}

	public class RankingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ranking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRankKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Assignment cAnswersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnswersAnswerParserRuleCall_7_0 = (RuleCall)cAnswersAssignment_7.eContents().get(0);
		
		//Ranking:
		//	"Q" isMandatory?="*"? questionText=EString "[" "rank" "]" answers+=Answer answers+=Answer*;
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString "[" "rank" "]" answers+=Answer answers+=Answer*
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//"rank"
		public Keyword getRankKeyword_4() { return cRankKeyword_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//answers+=Answer
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_7() { return cAnswersAssignment_7; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_7_0() { return cAnswersAnswerParserRuleCall_7_0; }
	}

	public class RatingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rating");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartEIntParserRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndEIntParserRuleCall_6_0 = (RuleCall)cEndAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIntervalAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIntervalEIntParserRuleCall_8_0 = (RuleCall)cIntervalAssignment_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Rating:
		//	"Q" isMandatory?="*"? questionText=EString "[" start=EInt "-" end=EInt "," interval=EInt "]";
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString "[" start=EInt "-" end=EInt "," interval=EInt "]"
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//start=EInt
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }

		//EInt
		public RuleCall getStartEIntParserRuleCall_4_0() { return cStartEIntParserRuleCall_4_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }

		//end=EInt
		public Assignment getEndAssignment_6() { return cEndAssignment_6; }

		//EInt
		public RuleCall getEndEIntParserRuleCall_6_0() { return cEndEIntParserRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//interval=EInt
		public Assignment getIntervalAssignment_8() { return cIntervalAssignment_8; }

		//EInt
		public RuleCall getIntervalEIntParserRuleCall_8_0() { return cIntervalEIntParserRuleCall_8_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
	}

	public class YesNoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "YesNo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cYNKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//YesNo:
		//	"Q" isMandatory?="*"? questionText=EString "[" "y/n" "]";
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString "[" "y/n" "]"
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//"y/n"
		public Keyword getYNKeyword_4() { return cYNKeyword_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class OpenFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		
		//OpenField:
		//	"Q" isMandatory?="*"? questionText=EString;
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }
	}

	public class MutuallyExclusive_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MutuallyExclusive_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryAsteriskKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cQuestionTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionTextEStringParserRuleCall_2_0 = (RuleCall)cQuestionTextAssignment_2.eContents().get(0);
		private final Assignment cAnswersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswersAnswerParserRuleCall_3_0 = (RuleCall)cAnswersAssignment_3.eContents().get(0);
		private final Assignment cAnswersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswersAnswerParserRuleCall_4_0 = (RuleCall)cAnswersAssignment_4.eContents().get(0);
		
		//MutuallyExclusive_Impl returns MutuallyExclusive:
		//	"Q" isMandatory?="*"? questionText=EString answers+=Answer answers+=Answer*;
		public ParserRule getRule() { return rule; }

		//"Q" isMandatory?="*"? questionText=EString answers+=Answer answers+=Answer*
		public Group getGroup() { return cGroup; }

		//"Q"
		public Keyword getQKeyword_0() { return cQKeyword_0; }

		//isMandatory?="*"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"*"
		public Keyword getIsMandatoryAsteriskKeyword_1_0() { return cIsMandatoryAsteriskKeyword_1_0; }

		//questionText=EString
		public Assignment getQuestionTextAssignment_2() { return cQuestionTextAssignment_2; }

		//EString
		public RuleCall getQuestionTextEStringParserRuleCall_2_0() { return cQuestionTextEStringParserRuleCall_2_0; }

		//answers+=Answer
		public Assignment getAnswersAssignment_3() { return cAnswersAssignment_3; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_3_0() { return cAnswersAnswerParserRuleCall_3_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_4() { return cAnswersAssignment_4; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_4_0() { return cAnswersAnswerParserRuleCall_4_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class PersonAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PersonAttribute");
		private final Assignment cKeyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_0 = (RuleCall)cKeyAssignment.eContents().get(0);
		
		//PersonAttribute:
		//	key=EString;
		public ParserRule getRule() { return rule; }

		//key=EString
		public Assignment getKeyAssignment() { return cKeyAssignment; }

		//EString
		public RuleCall getKeyEStringParserRuleCall_0() { return cKeyEStringParserRuleCall_0; }
	}
	
	
	private SurveyElements pSurvey;
	private QuestionElements pQuestion;
	private CategoryElements pCategory;
	private EStringElements pEString;
	private PersonElements pPerson;
	private PageElements pPage;
	private EBooleanElements pEBoolean;
	private AnswerElements pAnswer;
	private MultipleChoice_ImplElements pMultipleChoice_Impl;
	private RankingElements pRanking;
	private RatingElements pRating;
	private YesNoElements pYesNo;
	private OpenFieldElements pOpenField;
	private MutuallyExclusive_ImplElements pMutuallyExclusive_Impl;
	private EIntElements pEInt;
	private PersonAttributeElements pPersonAttribute;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TacoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.survey.xtext.Taco".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	"survey" title=EString ("date" date=EString)? ("description" description=EString)? person=Person? categories+=Category
	//	categories+=Category*;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Question:
	//	MultipleChoice_Impl | Ranking | Rating | YesNo | OpenField | MutuallyExclusive_Impl;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Category:
	//	"category" title=EString ("description" description=EString)? pages+=Page pages+=Page*;
	public CategoryElements getCategoryAccess() {
		return (pCategory != null) ? pCategory : (pCategory = new CategoryElements());
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Person:
	//	"person" attribute+=PersonAttribute ("," attribute+=PersonAttribute)*;
	public PersonElements getPersonAccess() {
		return (pPerson != null) ? pPerson : (pPerson = new PersonElements());
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Page:
	//	"page" questions+=Question questions+=Question*;
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//Answer:
	//	{Answer} "A" description=EString (isUserInputAllowed?="[" "input" "]")? ("sub" subquestion+=Question
	//	subquestion+=Question* "end")?;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//MultipleChoice_Impl returns MultipleChoice:
	//	"Q" isMandatory?="*"? questionText=EString "[" min=EInt "-" max=EInt "]" answers+=Answer answers+=Answer*;
	public MultipleChoice_ImplElements getMultipleChoice_ImplAccess() {
		return (pMultipleChoice_Impl != null) ? pMultipleChoice_Impl : (pMultipleChoice_Impl = new MultipleChoice_ImplElements());
	}
	
	public ParserRule getMultipleChoice_ImplRule() {
		return getMultipleChoice_ImplAccess().getRule();
	}

	//Ranking:
	//	"Q" isMandatory?="*"? questionText=EString "[" "rank" "]" answers+=Answer answers+=Answer*;
	public RankingElements getRankingAccess() {
		return (pRanking != null) ? pRanking : (pRanking = new RankingElements());
	}
	
	public ParserRule getRankingRule() {
		return getRankingAccess().getRule();
	}

	//Rating:
	//	"Q" isMandatory?="*"? questionText=EString "[" start=EInt "-" end=EInt "," interval=EInt "]";
	public RatingElements getRatingAccess() {
		return (pRating != null) ? pRating : (pRating = new RatingElements());
	}
	
	public ParserRule getRatingRule() {
		return getRatingAccess().getRule();
	}

	//YesNo:
	//	"Q" isMandatory?="*"? questionText=EString "[" "y/n" "]";
	public YesNoElements getYesNoAccess() {
		return (pYesNo != null) ? pYesNo : (pYesNo = new YesNoElements());
	}
	
	public ParserRule getYesNoRule() {
		return getYesNoAccess().getRule();
	}

	//OpenField:
	//	"Q" isMandatory?="*"? questionText=EString;
	public OpenFieldElements getOpenFieldAccess() {
		return (pOpenField != null) ? pOpenField : (pOpenField = new OpenFieldElements());
	}
	
	public ParserRule getOpenFieldRule() {
		return getOpenFieldAccess().getRule();
	}

	//MutuallyExclusive_Impl returns MutuallyExclusive:
	//	"Q" isMandatory?="*"? questionText=EString answers+=Answer answers+=Answer*;
	public MutuallyExclusive_ImplElements getMutuallyExclusive_ImplAccess() {
		return (pMutuallyExclusive_Impl != null) ? pMutuallyExclusive_Impl : (pMutuallyExclusive_Impl = new MutuallyExclusive_ImplElements());
	}
	
	public ParserRule getMutuallyExclusive_ImplRule() {
		return getMutuallyExclusive_ImplAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//PersonAttribute:
	//	key=EString;
	public PersonAttributeElements getPersonAttributeAccess() {
		return (pPersonAttribute != null) ? pPersonAttribute : (pPersonAttribute = new PersonAttributeElements());
	}
	
	public ParserRule getPersonAttributeRule() {
		return getPersonAttributeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
